'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	LS_Oracle_Lib
	
	@Author:
	Artem Areshko (Live Scripts Lab)
	http://live-scripts.blogspot.ru/
	https://vk.com/livescriptslab
	https://www.facebook.com/Live-Scripts-Lab-214495748709424/
	
	@Version: 1.0.0
	
	@Description:
		Library contains interface to Oracle Db. It uses ADO to get more options from
		Oracle than standart LC Classes.
%END REM

Option Public
Option Declare

%REM
	---=== History Log ===---
	--- Version: 2.0.0; 21.05.2016; Artem Areshko
	1. Change connector from OO4O to ADO
	
	2. Added method OracleConnector.Delete
	
%END REM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class OracleConnector
Declare Class OracleDataSet
Declare Private Sub InitErrorStrings()
Declare Private Sub RaiseError(errCode As Integer, param As String)

'++LotusScript Development Environment:2:5:(Declarations):0:10
'=========================
'===   P R I V A T E   ===
'=== C O N S T A N T S ===
'=========================
'*** DESIGN KEY ***
Private Const DESIGN = "LS_Oracle_Lib"

'=========================
'===    P U B L I C    ===
'=== C O N S T A N T S ===
'=========================
'*** Library Error Codes
Public Const ORA_ERR_PARAMEMPTY = 3500
Public Const ORA_ERR_PARAMNOTHING = 3501
Public Const ORA_ERR_PARAMNOTOBJECT = 3502
Public Const ORA_ERR_OLEOBJECTFAIL = 3503
Public Const ORA_ERR_ABSTRACTMETHOD = 3504
Public Const ORA_ERR_CONNECTIONFAILED = 3505

'=========================
'===   P R I V A T E   ===
'=== V A R I A B L E S ===
'=========================
Private errStrings List As String


%REM
	Class OracleConnector
	Description: Main Class. Est. connection
%END REM
Class OracleConnector
	Private dbName As String
	Private login As String
	Private pwd As String
	
	Private connection As Variant
	Private cmd As Variant
	
	%REM
		Sub New
		Description: Comments for Sub
	%END REM
	Public Sub New (DBName As String, userName As String, userPwd As String)
		On Error GoTo ErrorHandler		
		Const FuncName = "OracleConnector.New"
		
		Me.dbName = dbName
		Me.login = userName
		Me.pwd = userPwd
		
		If Not Me.InitializeConnection() Then Call RaiseError(ORA_ERR_CONNECTIONFAILED, dbName)
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	'InitializeConnection
	%REM
		Описание: 
	%END REM
	Private Function InitializeConnection() As Boolean
		On Error GoTo ErrorHandler
		Const FuncName = "OracleConnector.InitializeConnection ()"
		
		Set connection = CreateObject("ADODB.Connection")
		
		connection.Provider = "OraOLEDB.Oracle"
		connection.Properties("Persist Security Info") = "True"
		connection.Properties("Data Source") = dbName
		connection.Properties("User ID") = login
		connection.Properties("Password") = pwd
		connection.Open
		
		Set cmd = CreateObject("ADODB.Command")
		Set cmd.ActiveConnection = connection
		
		InitializeConnection = True
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", стр. " & Erl & Chr(10) & Error$
endh:
	End Function
	
	'GetDataSet
	%REM
		Описание: 
	%END REM
	Public Function GetDataSet(sqlQuery As String) As OracleDataSet
		On Error GoTo ErrorHandler
		Const FuncName = "OracleConnector.GetDataSet ()"
		
		Dim dataSet As Variant
		
		cmd.CommandText = sqlQuery
		cmd.CommandType = 1
		
		Set dataSet = cmd.Execute
		Set GetDataSet = New OracleDataSet(dataSet)
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", стр. " & Erl & Chr(10) & Error$
endh:
	End Function
	
	'ExecuteSQL
	%REM
		Описание: 
	%END REM
	Public Function ExecuteSQL(sqlQuery As String) As Long
		On Error GoTo ErrorHandler
		Const FuncName = "OracleConnector.ExecuteSQL ()"
		
		Dim result As Long
		
		cmd.CommandText = sqlQuery
		cmd.CommandType = 4
		
		Call cmd.Execute(result)
		ExecuteSQL = result
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", стр. " & Erl & Chr(10) & Error$
endh:
	End Function
	
	'Delete
	%REM
		Описание: 
	%END REM
	Public Sub Delete
		On Error GoTo ErrorHandler
		Const FuncName = "OracleConnector.Delete ()"
		
		If Not connection Is Nothing Then
			Call connection.close
			Set cmd = Nothing
			Set connection = Nothing
		End If
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", стр. " & Erl & Chr(10) & Error$
endh:
	End Sub
	
End Class
'*** OracleDataSet ***
%REM
	@Description: 
%END REM
Class OracleDataSet
	
	Private OraDynaset As Variant
	
	'New
	%REM
		@Description: 
	%END REM
	Public Sub New(oraDynaset As Variant)
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.New ()"
		
		If Not IsObject(oraDynaset) Then Call RaiseError(ORA_ERR_PARAMNOTOBJECT, "oraDynaset")
		If oraDynaset Is Nothing Then Call RaiseError(ORA_ERR_PARAMNOTHING, "oraDynaset")
		
		Set Me.OraDynaset = oraDynaset
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	'MoveFirst
	%REM
		@Description: 
	%END REM
	Public Sub MoveFirst()
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.MoveFirst ()"
		
		Me.OraDynaset.MoveFirst
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	'MoveNext
	%REM
		@Description: 
	%END REM
	Public Sub MoveNext()
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.MoveNext ()"
		
		Me.OraDynaset.MoveNext
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	'MoveTo
	%REM
		@Description: 
	%END REM
	Public Sub MoveTo(n As Long)
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.MoveTo ()"
		
		Me.MoveFirst
		Me.OraDynaset.Move n
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Sub
	
	'IsEOF
	%REM
		@Description: 
	%END REM
	Public Function IsEOF() As Boolean
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.IsEOF ()"
		
		IsEOF = Me.OraDynaset.EOF
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Function
	
	'RecordCount
	Public Property Get RecordCount As Long
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.RecordCount GET"
		
		RecordCount = Me.OraDynaset.RecordCount
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Property
	
	'GetFieldValue
	%REM
		@Description: 
	%END REM
	Public Function GetFieldValue(fieldName As String) As Variant
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.GetFieldValue ()"
		
		GetFieldValue = Me.OraDynaset.Fields.Item(fieldName).Value
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Function
	
	'GetFields
	%REM
		@Description: 
	%END REM
	Public Function GetFields() As Variant
		On Error GoTo ErrorHandler
		Const FuncName = "OracleDataSet.GetFields ()"
		
		Set GetFields = Me.OraDynaset.Fields
		
		GoTo endh
ErrorHandler:
		Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
	End Function

End Class
'++LotusScript Development Environment:2:2:InitErrorStrings:5:8
'InitErrorStrings
%REM
	@Description: 
%END REM
Private Sub InitErrorStrings()
	On Error GoTo ErrorHandler
	Const FuncName = "InitErrorStrings ()"
	
	errStrings(ORA_ERR_PARAMEMPTY) = "Param can't be empty: "
	errStrings(ORA_ERR_PARAMNOTHING) = "Param can't be empty: "
	errStrings(ORA_ERR_PARAMNOTOBJECT) = "Param must an object: "
	errStrings(ORA_ERR_OLEOBJECTFAIL) = "Failed to create OLE object: "
	errStrings(ORA_ERR_ABSTRACTMETHOD) = "Abstact method, need to override: "
	errStrings(ORA_ERR_CONNECTIONFAILED) = "Failed to establish connection: "
	
	GoTo endh
ErrorHandler:
	Error Err, "(" & DESIGN & ") " & FuncName & ", line " & Erl & Chr(10) & Error$
endh:
End Sub

'++LotusScript Development Environment:2:2:RaiseError:5:8
'RaiseError
%REM
	@Description: 
%END REM
Private Sub RaiseError(errCode As Integer, param As String)
	If param = "" Then
		Error errCode, errStrings(errCode)
	Else
		Error errCode, errStrings(errCode) & param
	End If	
End Sub

